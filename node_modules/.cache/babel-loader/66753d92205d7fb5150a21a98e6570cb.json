{"ast":null,"code":"import _slicedToArray from \"/home/kryo/Desktop/ReduxToolkit_TodoApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/kryo/Desktop/ReduxToolkit_TodoApp/src/Components/Todos.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodo, todosSelector, removeTodos, removeTodo, markComplete } from '../Store/Reducer/todoSlice';\nimport TodoItem from './TodoItem';\nimport { ListGroup, Button, Container, Row, Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todos() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFulfilled = _useState4[0],\n      setIsFulifilled = _useState4[1];\n\n  var todos = useSelector(todosSelector);\n  var dispatch = useDispatch();\n\n  var toggleIsComplete = function toggleIsComplete(id) {\n    dispatch(markComplete(id));\n  };\n\n  var handleDelete = function handleDelete(id, e) {\n    var ret = dispatch(removeTodo(id));\n    dispatch(getTodo());\n    return ret;\n  };\n\n  useEffect(function () {\n    // send request to jsonplaceholder\n    dispatch(getTodo()).then(function () {\n      setIsFulifilled(true);\n      setLoaded(true);\n    }, function () {\n      setIsFulifilled(false);\n      setLoaded(true);\n    });\n  }, [dispatch]);\n  return !loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ListGroup, {\n      as: \"ul\",\n      variant: \"flush\",\n      children: todos.map(function (todo) {\n        return /*#__PURE__*/_jsxDEV(TodoItem, {\n          todo: todo,\n          toggleIsComplete: toggleIsComplete,\n          handleDelete: handleDelete\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this) : isFulfilled ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 20\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Request Failed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 39\n  }, this);\n}\n\n_s(Todos, \"t+12Oky4EtqMhhRDnBM+Ayv5ITc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/home/kryo/Desktop/ReduxToolkit_TodoApp/src/Components/Todos.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","getTodo","todosSelector","removeTodos","removeTodo","markComplete","TodoItem","ListGroup","Button","Container","Row","Col","Todos","loaded","setLoaded","isFulfilled","setIsFulifilled","todos","dispatch","toggleIsComplete","id","handleDelete","e","ret","then","map","todo"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,OAAT,EAAmBC,aAAnB,EAAiCC,WAAjC,EAA8CC,UAA9C,EAA0DC,YAA1D,QAA6E,4BAA7E;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,GAAtC,EAA2CC,GAA3C,QAAqD,iBAArD;;;AAGA,SAASC,KAAT,GAAiB;AAAA;;AAAA;;AAAA,kBAEaf,QAAQ,CAAC,KAAD,CAFrB;AAAA;AAAA,MAERgB,MAFQ;AAAA,MAEAC,SAFA;;AAAA,mBAGwBjB,QAAQ,CAAC,KAAD,CAHhC;AAAA;AAAA,MAGRkB,WAHQ;AAAA,MAGKC,eAHL;;AAKf,MAAMC,KAAK,GAAGlB,WAAW,CAACG,aAAD,CAAzB;AAEA,MAAMgB,QAAQ,GAAGlB,WAAW,EAA5B;;AAEA,MAAMmB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,EAAD,EAAQ;AAC/BF,IAAAA,QAAQ,CAACb,YAAY,CAACe,EAAD,CAAb,CAAR;AACD,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACD,EAAD,EAAKE,CAAL,EAAW;AAC9B,QAAMC,GAAG,GAAGL,QAAQ,CAACd,UAAU,CAACgB,EAAD,CAAX,CAApB;AACFF,IAAAA,QAAQ,CAACjB,OAAO,EAAR,CAAR;AACE,WAAOsB,GAAP;AACD,GAJD;;AAMAzB,EAAAA,SAAS,CAAC,YAAM;AAChB;AACAoB,IAAAA,QAAQ,CAACjB,OAAO,EAAR,CAAR,CAAoBuB,IAApB,CAAyB,YAAM;AAC3BR,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAHH,EAIE,YAAM;AACJE,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAPH;AAQA,GAVS,EAUP,CAACI,QAAD,CAVO,CAAT;AAYA,SAAO,CAACL,MAAD,gBAEL;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,IAAd;AAAmB,MAAA,OAAO,EAAC,OAA3B;AAAA,gBACGI,KAAK,CAACQ,GAAN,CAAU,UAACC,IAAD;AAAA,4BACT,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEA,IAAhB;AAAqC,UAAA,gBAAgB,EAAEP,gBAAvD;AAAyE,UAAA,YAAY,EAAEE;AAAvF,WAA4BK,IAAI,CAACN,EAAjC;AAAA;AAAA;AAAA;AAAA,iBADS;AAAA,OAAV;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAFK,GASHL,WAAW,gBAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAF,gBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATpC;AAUD;;GAzCQH,K;UAKOb,W,EAEGC,W;;;KAPVY,K;AA2CT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { getTodo , todosSelector,removeTodos, removeTodo, markComplete} from '../Store/Reducer/todoSlice';\r\nimport TodoItem from './TodoItem'\r\nimport {ListGroup, Button, Container, Row, Col} from 'react-bootstrap'\r\n\r\n\r\nfunction Todos() {\r\n\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [isFulfilled, setIsFulifilled] = useState(false);\r\n\r\n  const todos = useSelector(todosSelector);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleIsComplete = (id) => {\r\n    dispatch(markComplete(id))\r\n  }\r\n\r\n  const handleDelete = (id, e) => {\r\n    const ret = dispatch(removeTodo(id))\r\n\t\tdispatch(getTodo());\r\n    return ret;\r\n  }\r\n\r\n  useEffect(() => {\r\n\t\t// send request to jsonplaceholder\r\n\t\tdispatch(getTodo()).then(() => {\r\n      setIsFulifilled(true)\r\n      setLoaded(true)\r\n    },\r\n    () => {\r\n      setIsFulifilled(false)\r\n      setLoaded(true)\r\n    })\r\n\t}, [dispatch])\r\n\r\n  return !loaded? \r\n  (\r\n    <div>\r\n      <ListGroup as='ul' variant='flush'>\r\n        {todos.map((todo) => (\r\n          <TodoItem todo={todo}  key={todo.id} toggleIsComplete={toggleIsComplete} handleDelete={handleDelete}/>\r\n        ))}\r\n      </ListGroup>\r\n    </div>\r\n  ) : isFulfilled? <h1>Loading</h1> : <h1>Request Failed</h1>\r\n}\r\n\r\nexport default Todos;\r\n"]},"metadata":{},"sourceType":"module"}